{"ast":null,"code":"import EventEmitter from \"events\";\nimport { auth, database as db, storage as st, firebase_app as firebase } from \"../FirebaseModule.js\";\n\nclass DBStore extends EventEmitter {\n  constructor() {\n    super();\n    this.queryLimit = 50;\n    this.designs = {}; // key = design_id\n\n    this.designListeners = [];\n    this.designsMap = {};\n    this.user = {};\n    this.defaultPhotoUrl = \"https://viima-app.s3.amazonaws.com/media/public/defaults/user-icon.png\"; // Method Binds\n    // files\n\n    this.uploadFile = this.uploadFile.bind(this); // designs\n\n    this.uploadDesign = this.uploadDesign.bind(this);\n    this.getDesignsForQueries = this.getDesignsForQueries.bind(this);\n    this.listenForDesignsChange = this.listenForDesignsChange.bind(this);\n    this.addDesign = this.addDesign.bind(this);\n    this.updateDesign = this.updateDesign.bind(this);\n    this.removeDesign = this.removeDesign.bind(this);\n    this.upvoteDesign = this.upvoteDesign.bind(this);\n    this.downvoteDesign = this.downvoteDesign.bind(this);\n    this.getDesigns = this.getDesigns.bind(this);\n    this.getDesignsMap = this.getDesignsMap.bind(this);\n    this.getTop3Designs = this.getTop3Designs.bind(this); // comments\n\n    this.fetchCommentsForDesignByDoc = this.fetchCommentsForDesignByDoc.bind(this);\n    this.fetchCommentsForDesignById = this.fetchCommentsForDesignById.bind(this);\n    this.addComment = this.addComment.bind(this);\n    this.editComment = this.editComment.bind(this);\n    this.removeComment = this.removeComment.bind(this);\n    this.userHasUpvotedComment = this.userHasUpvotedComment.bind(this);\n    this.addCommentUpvote = this.addCommentUpvote.bind(this);\n    this.removeCommentUpvote = this.removeCommentUpvote.bind(this); // auth\n\n    this.authenticateUser = this.authenticateUser.bind(this);\n    this.getAuthUser = this.getAuthUser.bind(this);\n    this.getMyProfileUrl = this.getMyProfileUrl.bind(this);\n    this.getProfileUrl = this.getProfileUrl.bind(this);\n    this.getDBUser = this.getDBUser.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  async uploadDesign(design) {\n    return new Promise((resolve, reject) => {\n      if (!this.isAuthenticated()) reject(new Error(\"User not authenticated.\"));\n      let {\n        displayName,\n        uid\n      } = this.getAuthUser();\n      design[\"user\"] = displayName;\n      design[\"uid\"] = uid;\n      db.runTransaction(transaction => {\n        try {\n          let design_id = db.collection(\"Designs\").doc().id,\n              design_ref = db.collection(\"Designs\").doc(design_id),\n              user_ref = db.collection(\"Users\").doc(uid);\n          return transaction.get(user_ref).then(user_snapshot => {\n            if (!user_snapshot.exists) throw \"User document doesn't exist\";\n            transaction.update(user_ref, {\n              designs: firebase.firestore.FieldValue.arrayUnion(design_id)\n            });\n            transaction.set(design_ref, design);\n          });\n        } catch (err) {\n          throw err;\n        }\n      }).then(() => {\n        // Transaction successful\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async uploadFile(file, path) {\n    return new Promise((resolve, reject) => {\n      let filePut = st.child(path + file.name).put(file);\n      filePut.on(firebase.storage.TaskEvent.STATE_CHANGED, // Progress\n      snapshot => {// let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        // console.log(\"Upload is \" + progress + \"% done\");\n      }, // Error\n      error => {\n        console.log(error);\n        reject(\"Failure to upload \" + file.name);\n      }, // Success\n      () => {\n        filePut.snapshot.ref.getDownloadURL().then(downloadURL => {\n          resolve({\n            name: file.name,\n            url: downloadURL\n          });\n        });\n      });\n    });\n  }\n\n  async authenticateUser(authResult) {\n    return new Promise((resolve, reject) => {\n      db.runTransaction(transaction => {\n        let {\n          user\n        } = authResult,\n            user_ref = db.collection(\"Users\").doc(user.uid);\n        return transaction.get(user_ref).then(user_snapshot => {\n          let user_doc = user_snapshot.data();\n\n          if (!user_snapshot.exists || user_doc === null) {\n            // New User\n            transaction.set(user_ref, {\n              name: user.displayName,\n              email: user.email,\n              emailVerified: user.emailVerified,\n              phone: user.phoneNumber,\n              uid: user.uid,\n              photoUrl: user.photoURL,\n              lastLogin: firebase.firestore.FieldValue.serverTimestamp(),\n              comments: [],\n              designs: [],\n              upvotedComments: []\n            });\n          } else {\n            // Returning User\n            transaction.update(user_ref, {\n              name: user_doc.name !== user.displayName ? user.displayName : user_doc.name,\n              email: user_doc.email !== user.email ? user.email : user_doc,\n              emailVerified: user.emailVerified,\n              phone: user_doc.phone !== user.phoneNumber ? user.phoneNumber : user_doc.phone,\n              photoUrl: user_doc.photoUrl !== user.photoURL ? user.photoURL : user_doc.photoUrl,\n              lastLogin: firebase.firestore.FieldValue.serverTimestamp()\n            });\n          }\n        });\n      }).then(() => {\n        // Transaction successful\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n  /*\n      queries = [\n          [\"upvotes\", \">=\", \"6\"],\n          [\"category\", \"==\", \"surgicalMask\"]\n      ]\n       lastDoc - reference to the snapshot returned by \n  */\n\n\n  async getDesignsForQueries(queries, lastDoc) {\n    return new Promise((resolve, reject) => {\n      let designs_ref = db.collection(\"Designs\");\n      queries.forEach(q => {\n        designs_ref = designs_ref.where(q[0], // field i.e. \"upvotes\"\n        q[1], // operator i.e. \">\"\n        q[2] // value i.e. \"5\"\n        );\n      });\n      designs_ref = designs_ref.orderBy(\"upvotes\", \"asc\");\n      if (lastDoc !== null) designs_ref = designs_ref.startAfter(lastDoc);\n      designs_ref = designs_ref.limit(this.queryLimit);\n      designs_ref.get().then(designs_snapshot => {\n        let designs_docs = designs_snapshot.data();\n        resolve({\n          designs: designs_docs,\n          lastDoc: designs_snapshot.docs[designs_snapshot.docs.length - 1]\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  } // Propagates design changes through event emitter\n\n\n  listenForDesignsChange() {\n    db.collection(\"Designs\").onSnapshot(querySnapshots => {\n      querySnapshots.docChanges().forEach(change => {\n        let doc = change.doc.data();\n\n        switch (change.type) {\n          case \"added\":\n            this.addDesign(doc);\n            break;\n\n          case \"modified\":\n            this.updateDesign(doc);\n            break;\n\n          case \"removed\":\n            this.removeDesign(doc);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  addDesign(doc) {\n    let {\n      id\n    } = doc;\n    if (this.designs[id] !== null) throw \"Design can't be added.\"; //this.designs[id] = new Design(doc);\n\n    this.designs[id] = doc;\n    setTimeout(() => {\n      this.emit(\"DesignAdded\", doc);\n    }, 0);\n  }\n\n  updateDesign(doc) {\n    let {\n      id\n    } = doc;\n    if (this.designs[id] === null) throw \"Design can't be updated\"; //this.designs[id].update(doc);\n\n    this.designs[id] = doc;\n    setTimeout(() => {\n      this.emit(\"DesignUpdated\", doc);\n    });\n  }\n\n  removeDesign(doc) {\n    let {\n      id\n    } = doc;\n    if (this.designs[id] === null) throw \"Design can't be removed\";\n    this.designs[id] = null;\n    delete this.designs[id];\n    setTimeout(() => {\n      this.emit(\"DesignRemoved\", doc);\n    });\n  }\n\n  async fetchCommentsForDesignByDoc(doc) {\n    return new Promise((resolve, reject) => {\n      let {\n        comments\n      } = doc;\n\n      if (comments === undefined || comments === null || comments.length === 0) {\n        resolve([]);\n      }\n\n      let comment_fetches = [];\n      comments.forEach(comment_id => {\n        comment_fetches.push(db.collection(\"Comments\").doc(comment_id).get());\n      });\n      Promise.all(comment_fetches).then(results => {\n        results = results.map(res => {\n          return res.data();\n        });\n        resolve(results);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async fetchCommentsForDesignById(design_id) {\n    return new Promise((resolve, reject) => {\n      db.runTransaction(transaction => {\n        let design_ref = db.collection(\"Designs\").doc(design_id);\n        return transaction.get(design_ref).then(design_snapshot => {\n          if (!design_snapshot.exists) {\n            throw \"Design doesn't exist\";\n          }\n\n          let design_doc = design_snapshot.data();\n          let commentsRefs = design_doc.comments;\n          if (commentsRefs === null || commentsRefs.length === 0) return [];\n          let commentsFetches = commentsRefs.map(c => {\n            let ref = db.collection(\"Comments\").doc(c);\n            return transaction.get(ref);\n          });\n          return Promise.all(commentsFetches).then(fetchedComments => {\n            fetchedComments = fetchedComments.map(fc => {\n              return fc.data();\n            });\n            return fetchedComments;\n          });\n        });\n      }).then(comments => {\n        // Transaction successful\n        resolve(comments);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async addComment(design_id, comment_value) {\n    return new Promise((resolve, reject) => {\n      if (!this.isAuthenticated()) reject(\"Please login before making a comment!\");\n      db.runTransaction(transaction => {\n        let user = this.getAuthUser(),\n            comment_ref = db.collection(\"Comments\").doc(),\n            comment_id = comment_ref.id,\n            user_ref = db.collection(\"Users\").doc(user.uid),\n            design_ref = db.collection(\"Designs\").doc(design_id);\n        return Promise.all([transaction.get(user_ref), transaction.get(design_ref)]).then(snapshots => {\n          let user_snapshot = snapshots[0],\n              design_snapshot = snapshots[1];\n          if (!user_snapshot.exists) throw \"User document doesn't exist\";\n          if (!design_snapshot.exists) throw \"Design document doesn't exist\";\n          transaction.set(comment_ref, {\n            id: comment_id,\n            time: firebase.firestore.FieldValue.serverTimestamp(),\n            modified: firebase.firestore.FieldValue.serverTimestamp(),\n            content: comment_value,\n            author: user.displayName,\n            uid: user.uid,\n            design: design_id,\n            upvoteCount: 0\n          });\n          transaction.update(user_ref, {\n            comments: firebase.firestore.FieldValue.arrayUnion(comment_id)\n          });\n          transaction.update(design_ref, {\n            comments: firebase.firestore.FieldValue.arrayUnion(comment_id)\n          });\n        });\n      }).then(() => {\n        // Transaction successful\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async editComment(comment_id, new_value, new_timestamp) {\n    return new Promise((resolve, reject) => {\n      if (!this.isAuthenticated()) reject(\"Please login before editing a comment!\");\n      db.runTransaction(transaction => {\n        let comment_ref = db.collection(\"Comments\").doc(comment_id);\n        return transaction.get(comment_ref).then(comment_snapshot => {\n          if (!comment_snapshot.exists) throw \"Comment document doesn't exist\";\n          transaction.update(comment_ref, {\n            content: new_value,\n            modified: new_timestamp\n          });\n        });\n      }).then(() => {\n        // Transaction succesful\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async removeComment(comment_id) {\n    return new Promise((resolve, reject) => {\n      if (!this.isAuthenticated()) reject(\"Please login before removing a comment!\");\n      db.runTransaction(transaction => {\n        let comment_ref = db.collection(\"Comments\").doc(comment_id);\n        return transaction.get(comment_ref).then(comment_snapshot => {\n          if (!comment_snapshot.exists) throw \"Comment document doesn't exist\";\n          let comment_doc = comment_snapshot.data(),\n              design_id = comment_doc.design,\n              {\n            uid\n          } = comment_doc,\n              design_ref = db.collection(\"Designs\").doc(design_id),\n              user_ref = db.collection(\"Users\").doc(uid);\n          transaction.update(design_ref, {\n            comments: firebase.firestore.FieldValue.arrayRemove(comment_id)\n          });\n          transaction.update(user_ref, {\n            comments: firebase.firestore.FieldValue.arrayRemove(comment_id)\n          });\n          transaction.delete(comment_ref);\n        });\n      }).then(() => {\n        // Transaction succesful\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async upvoteDesign(design_id) {\n    return new Promise((resolve, reject) => {\n      if (!this.isAuthenticated()) reject(\"Please login before upvoting a design!\");\n      db.runTransaction(transaction => {\n        let user = this.getAuthUser(),\n            {\n          uid\n        } = user,\n            user_ref = db.collection(\"Users\").doc(uid),\n            design_ref = db.collection(\"Designs\").doc(design_id),\n            increment = 1;\n        return transaction.get(user_ref).then(user_snapshot => {\n          if (!user_snapshot.exists) throw \"User document doesn't exist\";\n          let user_doc = user_snapshot.data(); // Check if user has already upvoted\n\n          if (user_doc.upvotes !== null && user_doc.upvotes.includes(design_id)) {\n            throw \"You can't upvote a design more than once!\";\n          } // Check if user has downvoted\n\n\n          if (user_doc.downvotes !== null && user_doc.downvotes.includes(design_id)) increment++;\n          transaction.update(user_ref, {\n            upvotes: firebase.firestore.FieldValue.arrayUnion(design_id),\n            downvotes: increment > 1 ? firebase.firestore.FieldValue.arrayRemove(design_id) : user_doc.downvotes\n          });\n          transaction.update(design_ref, {\n            upvotes: firebase.firestore.FieldValue.increment(increment)\n          });\n        });\n      }).then(() => {\n        // Transaction successful\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async downvoteDesign(design_id) {\n    return new Promise((resolve, reject) => {\n      if (!this.isAuthenticated()) reject(\"Please login before downvoting a design!\");\n      db.runTransaction(transaction => {\n        let user = this.getAuthUser(),\n            {\n          uid\n        } = user,\n            user_ref = db.collection(\"Users\").doc(uid),\n            design_ref = db.collection(\"Designs\").doc(design_id),\n            increment = 1;\n        return transaction.get(user_ref).then(user_snapshot => {\n          if (!user_snapshot.exists) throw \"User document doesn't exist\";\n          let user_doc = user_snapshot.data(); // Check if user has already downvoted\n\n          if (user_doc.downvotes !== null && user_doc.downvotes.includes(design_id)) {\n            throw \"You can't downvote a design more than once!\";\n          } // Check if user has upvoted\n\n\n          if (user_doc.upvotes !== null && user_doc.upvotes.includes(design_id)) increment++;\n          transaction.update(user_ref, {\n            upvotes: increment > 1 ? firebase.firestore.FieldValue.arrayRemove(design_id) : user_doc.upvotes,\n            downvotes: firebase.firestore.FieldValue.arrayUnion(design_id)\n          });\n          transaction.update(design_ref, {\n            upvotes: firebase.firestore.FieldValue.increment(-increment)\n          });\n        });\n      }).then(() => {\n        // Transaction successful\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async userHasUpvotedComment(uid, comment_id) {\n    return new Promise((resolve, reject) => {\n      if (uid === undefined || uid === null) reject(\"User ID not supplied\");\n      if (comment_id === undefined || comment_id === null) reject(\"Comment ID not supplied\");\n      let user_ref = db.collection(\"Users\").doc(uid);\n      user_ref.get().then(user_snapshot => {\n        if (!user_snapshot.exists) throw \"User document doesn't exist\";\n        let user_doc = user_snapshot.data(); // Check if there are any upvoted comments\n\n        if (user_doc.upvotedComments === null || user_doc.upvotedComments.length === 0) {\n          resolve(false);\n        }\n\n        ; // Check if comment_id is in the upvoted list\n\n        let isInList = user_doc.upvotedComments.includes(comment_id);\n        resolve(isInList);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async addCommentUpvote(comment_id) {\n    return new Promise((resolve, reject) => {\n      if (!this.isAuthenticated()) reject(\"Please login before upvoting comments!\");\n      db.runTransaction(transaction => {\n        let user = this.getAuthUser(),\n            {\n          uid\n        } = user,\n            user_ref = db.collection(\"Users\").doc(uid),\n            comment_ref = db.collection(\"Comments\").doc(uid);\n        return Promise.all([transaction.get(user_ref), transaction.get(comment_ref)]).then(snapshots => {\n          let user_snapshot = snapshots[0],\n              comment_snapshot = snapshots[1];\n          if (!user_snapshot.exists) throw \"User document doesn't exist\";\n          if (!comment_snapshot.exists) throw \"Comment document doesn't exist\";\n          let user_doc = user_snapshot.data(); // comment_doc = comment_snapshot.data();\n          // Check if already upvoted\n\n          if (user_doc.upvotedComments !== null && user_doc.upvotedComments.includes(comment_id)) {\n            throw \"You can only upvote a comment once\";\n          }\n\n          transaction.update(comment_ref, {\n            upvoteCount: firebase.firestore.FieldValue.increment(1)\n          });\n          transaction.update(user_ref, {\n            upvotedComments: firebase.firestore.FieldValue.arrayUnion(comment_id)\n          });\n        });\n      }).then(() => {\n        // Transaction successful\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  async removeCommentUpvote(comment_id) {\n    return new Promise((resolve, reject) => {\n      if (!this.isAuthenticated()) reject(\"Please login to remove a comment upvote!\");\n      db.runTransaction(transaction => {\n        let user = this.getAuthUser(),\n            {\n          uid\n        } = user,\n            user_ref = db.collection(\"Users\").doc(uid),\n            comment_ref = db.collection(\"Comments\").doc(comment_id);\n        return Promise.all([transaction.get(user_ref), transaction.get(comment_ref)]).then(snapshots => {\n          let user_snapshot = snapshots[0],\n              comment_snapshot = snapshots[1];\n          if (!user_snapshot.exists) throw \"User document doesn't exist\";\n          if (!comment_snapshot.exists) throw \"Comment document doesn't exist\";\n          let user_doc = user_snapshot.data(); // Check if user hasn't upvoted, if not, just return\n\n          if (user_doc.upvotedComments !== null && !user_doc.upvotedComments.includes(comment_id)) return;\n          transaction.update(comment_ref, {\n            upvoteCount: firebase.firestore.FieldValue.increment(-1)\n          });\n          transaction.update(user_ref, {\n            upvotedComments: firebase.firestore.FieldValue.arrayRemove(comment_id)\n          });\n        });\n      }).then(() => {\n        // Transaction successful\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  getAuthUser() {\n    return auth.user === null ? auth.currentUser : auth.user;\n  }\n\n  getMyProfileUrl() {\n    let user = this.getAuthUser();\n    return user !== null && user.hasOwnProperty(\"photoURL\") ? user.photoURL : this.defaultPhotoUrl;\n  }\n\n  async getProfileUrl(uid) {\n    return new Promise((resolve, reject) => {\n      let user_ref = db.collection(\"Users\").doc(uid);\n      user_ref.get().then(user_snapshot => {\n        if (!user_snapshot.exists) throw \"User document doesn't exist\";\n        let user_doc = user_snapshot.data();\n\n        if (user_doc.hasOwnProperty(\"photoUrl\")) {\n          resolve(user_doc.photoUrl);\n        } else {\n          resolve(this.defaultPhotoUrl);\n        }\n      }).catch(error => {\n        console.log(error);\n        resolve(this.defaultPhotoUrl);\n      });\n    });\n  }\n\n  getDBUser() {\n    return this.user;\n  }\n\n  isAuthenticated() {\n    return auth.user !== null || auth.currentUser !== null;\n  }\n\n  async getDesigns() {\n    try {\n      const designsRef = db.collection('Designs');\n      const allDesignsArray = await designsRef.get();\n      const allDesigns = [];\n      allDesignsArray.forEach(design => {\n        allDesigns.push(design.data());\n      });\n      return allDesigns;\n    } catch (err) {\n      console.log(\"Could not fetch designs:\", err);\n      return {\n        err\n      };\n    }\n  }\n\n  getDesignsMap() {\n    return this.designsMap;\n  }\n\n  async getTop3Designs(opts) {\n    let designs = await this.getDesigns();\n    return designs.slice(0, 3);\n  }\n\n}\n\nlet dbstore = new DBStore();\nexport default dbstore;","map":{"version":3,"sources":["/Users/amadrzyk/Projects/COVID-19-Resource-Distribution/src/stores/DBStore.js"],"names":["EventEmitter","auth","database","db","storage","st","firebase_app","firebase","DBStore","constructor","queryLimit","designs","designListeners","designsMap","user","defaultPhotoUrl","uploadFile","bind","uploadDesign","getDesignsForQueries","listenForDesignsChange","addDesign","updateDesign","removeDesign","upvoteDesign","downvoteDesign","getDesigns","getDesignsMap","getTop3Designs","fetchCommentsForDesignByDoc","fetchCommentsForDesignById","addComment","editComment","removeComment","userHasUpvotedComment","addCommentUpvote","removeCommentUpvote","authenticateUser","getAuthUser","getMyProfileUrl","getProfileUrl","getDBUser","isAuthenticated","design","Promise","resolve","reject","Error","displayName","uid","runTransaction","transaction","design_id","collection","doc","id","design_ref","user_ref","get","then","user_snapshot","exists","update","firestore","FieldValue","arrayUnion","set","err","catch","error","file","path","filePut","child","name","put","on","TaskEvent","STATE_CHANGED","snapshot","console","log","ref","getDownloadURL","downloadURL","url","authResult","user_doc","data","email","emailVerified","phone","phoneNumber","photoUrl","photoURL","lastLogin","serverTimestamp","comments","upvotedComments","queries","lastDoc","designs_ref","forEach","q","where","orderBy","startAfter","limit","designs_snapshot","designs_docs","docs","length","onSnapshot","querySnapshots","docChanges","change","type","setTimeout","emit","undefined","comment_fetches","comment_id","push","all","results","map","res","design_snapshot","design_doc","commentsRefs","commentsFetches","c","fetchedComments","fc","comment_value","comment_ref","snapshots","time","modified","content","author","upvoteCount","new_value","new_timestamp","comment_snapshot","comment_doc","arrayRemove","delete","increment","upvotes","includes","downvotes","isInList","currentUser","hasOwnProperty","designsRef","allDesignsArray","allDesigns","opts","slice","dbstore"],"mappings":"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","sourcesContent":["import EventEmitter from \"events\";\nimport { auth, database as db, storage as st, firebase_app as firebase } from \"../FirebaseModule.js\";\n\nclass DBStore extends EventEmitter {\n    constructor() {\n        super();\n        this.queryLimit = 50;\n        this.designs = {}; // key = design_id\n        this.designListeners = [];\n        this.designsMap = {};\n        this.user = {};\n\n        this.defaultPhotoUrl = \"https://viima-app.s3.amazonaws.com/media/public/defaults/user-icon.png\";\n\n        // Method Binds\n\n        // files\n        this.uploadFile = this.uploadFile.bind(this);\n\n        // designs\n        this.uploadDesign = this.uploadDesign.bind(this);\n        this.getDesignsForQueries = this.getDesignsForQueries.bind(this);\n        this.listenForDesignsChange = this.listenForDesignsChange.bind(this);\n        this.addDesign = this.addDesign.bind(this);\n        this.updateDesign = this.updateDesign.bind(this);\n        this.removeDesign = this.removeDesign.bind(this);\n        this.upvoteDesign = this.upvoteDesign.bind(this);\n        this.downvoteDesign = this.downvoteDesign.bind(this);\n        this.getDesigns = this.getDesigns.bind(this);\n        this.getDesignsMap = this.getDesignsMap.bind(this);\n        this.getTop3Designs = this.getTop3Designs.bind(this);\n\n        // comments\n        this.fetchCommentsForDesignByDoc = this.fetchCommentsForDesignByDoc.bind(this);\n        this.fetchCommentsForDesignById = this.fetchCommentsForDesignById.bind(this);\n        this.addComment = this.addComment.bind(this);\n        this.editComment = this.editComment.bind(this);\n        this.removeComment = this.removeComment.bind(this);\n        this.userHasUpvotedComment = this.userHasUpvotedComment.bind(this);\n        this.addCommentUpvote = this.addCommentUpvote.bind(this);\n        this.removeCommentUpvote = this.removeCommentUpvote.bind(this);\n\n        // auth\n        this.authenticateUser = this.authenticateUser.bind(this);\n        this.getAuthUser = this.getAuthUser.bind(this);\n        this.getMyProfileUrl = this.getMyProfileUrl.bind(this);\n        this.getProfileUrl = this.getProfileUrl.bind(this);\n        this.getDBUser = this.getDBUser.bind(this);\n        this.isAuthenticated = this.isAuthenticated.bind(this);\n    }\n\n    async uploadDesign(design) {\n        return new Promise((resolve, reject) => {\n            if (!this.isAuthenticated()) reject(new Error(\"User not authenticated.\"));\n\n            let { displayName, uid } = this.getAuthUser();\n            design[\"user\"] = displayName;\n            design[\"uid\"] = uid;\n            \n            db.runTransaction((transaction) => {\n                try {\n                    let design_id = db.collection(\"Designs\").doc().id,\n                      design_ref = db.collection(\"Designs\").doc(design_id),\n                      user_ref = db.collection(\"Users\").doc(uid);\n\n                    return transaction.get(user_ref).then((user_snapshot) => {\n                        if (!user_snapshot.exists) throw \"User document doesn't exist\";\n\n                        transaction.update(user_ref, {\n                            designs: firebase.firestore.FieldValue.arrayUnion(design_id)\n                        });\n\n                        transaction.set(design_ref, design);\n                    });\n                } catch (err) {\n                    throw err;\n                }\n            }).then(() => {\n                // Transaction successful\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            });\n            \n        });\n    }\n\n    async uploadFile(file, path) {\n        return new Promise((resolve, reject) => {\n            let filePut = st.child(path + file.name).put(file);\n            \n            filePut.on(firebase.storage.TaskEvent.STATE_CHANGED,\n                // Progress\n                (snapshot) => {\n                    // let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                    // console.log(\"Upload is \" + progress + \"% done\");\n                },\n                // Error\n                (error) => {\n                    console.log(error);\n                    reject(\"Failure to upload \" + file.name);\n                },\n                // Success\n                () => {\n                    filePut.snapshot.ref.getDownloadURL().then((downloadURL) => {\n                        resolve({ \n                            name: file.name,\n                            url: downloadURL\n                        });\n                    });\n                })\n        });\n    }\n\n    async authenticateUser(authResult) {\n        return new Promise((resolve, reject) => {\n            db.runTransaction((transaction) => {\n                let { user } = authResult,\n                    user_ref = db.collection(\"Users\").doc(user.uid);\n\n                return transaction.get(user_ref).then((user_snapshot) => {\n                    let user_doc = user_snapshot.data();\n\n                    if (!user_snapshot.exists || user_doc === null) {\n                        // New User\n                        transaction.set(user_ref, {\n                            name: user.displayName,\n                            email: user.email,\n                            emailVerified: user.emailVerified,\n                            phone: user.phoneNumber,\n                            uid: user.uid,\n                            photoUrl: user.photoURL,\n                            lastLogin: firebase.firestore.FieldValue.serverTimestamp(),\n                            comments: [],\n                            designs: [],\n                            upvotedComments: []\n                        });\n                    } else {\n                        // Returning User\n                        transaction.update(user_ref, {\n                            name: user_doc.name !== user.displayName ? user.displayName : user_doc.name,\n                            email: user_doc.email !== user.email ? user.email : user_doc,\n                            emailVerified: user.emailVerified,\n                            phone: user_doc.phone !== user.phoneNumber ? user.phoneNumber : user_doc.phone,\n                            photoUrl: user_doc.photoUrl !== user.photoURL ? user.photoURL : user_doc.photoUrl,\n                            lastLogin: firebase.firestore.FieldValue.serverTimestamp()\n                        });\n                    }\n                });\n            }).then(() => {\n                // Transaction successful\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            })\n        });\n    }\n\n    /*\n        queries = [\n            [\"upvotes\", \">=\", \"6\"],\n            [\"category\", \"==\", \"surgicalMask\"]\n        ]\n\n        lastDoc - reference to the snapshot returned by \n    */\n    async getDesignsForQueries(queries, lastDoc) {\n        return new Promise((resolve, reject) => {\n            let designs_ref = db.collection(\"Designs\")\n            queries.forEach((q) => {\n                designs_ref = designs_ref.where(\n                    q[0], // field i.e. \"upvotes\"\n                    q[1], // operator i.e. \">\"\n                    q[2] // value i.e. \"5\"\n                );\n            });\n            designs_ref = designs_ref.orderBy(\"upvotes\", \"asc\");\n\n            if(lastDoc !== null) designs_ref = designs_ref.startAfter(lastDoc);\n\n            designs_ref = designs_ref.limit(this.queryLimit);\n\n            designs_ref.get().then((designs_snapshot) => {\n                let designs_docs = designs_snapshot.data();\n                resolve({\n                    designs: designs_docs,\n                    lastDoc: designs_snapshot.docs[designs_snapshot.docs.length - 1]\n                });\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    // Propagates design changes through event emitter\n    listenForDesignsChange() {\n        db.collection(\"Designs\").onSnapshot((querySnapshots) => {\n            querySnapshots.docChanges().forEach((change) => {\n                let doc = change.doc.data();\n                switch(change.type) {\n                    case \"added\":\n                        this.addDesign(doc);\n                    break;\n\n                    case \"modified\":\n                        this.updateDesign(doc);\n                    break;\n\n                    case \"removed\":\n                        this.removeDesign(doc);\n                    break;\n                    default:\n                    break;\n                }\n            });\n        }, (error) => {\n            console.log(error);\n        });\n    }\n\n    addDesign(doc) {\n        let { id } = doc;\n        if(this.designs[id] !== null) throw \"Design can't be added.\";\n        //this.designs[id] = new Design(doc);\n        this.designs[id] = doc;\n        setTimeout(() => {\n            this.emit(\"DesignAdded\", doc);\n        }, 0);\n    }\n\n    updateDesign(doc) {\n        let { id } = doc;\n        if(this.designs[id] === null) throw \"Design can't be updated\";\n        //this.designs[id].update(doc);\n        this.designs[id] = doc;\n        setTimeout(() => {\n            this.emit(\"DesignUpdated\", doc);\n        })\n    }\n\n    removeDesign(doc) {\n        let { id } = doc;\n        if(this.designs[id] === null) throw \"Design can't be removed\";\n        this.designs[id] = null;\n        delete this.designs[id];\n        setTimeout(() => {\n            this.emit(\"DesignRemoved\", doc);\n        });\n    }\n\n    async fetchCommentsForDesignByDoc(doc) {\n        return new Promise((resolve, reject) => {\n            let { comments } = doc;\n            if (comments === undefined || comments === null || comments.length === 0) {\n                resolve([]);\n            }\n\n            let comment_fetches = [];\n            comments.forEach((comment_id) => {\n                comment_fetches.push(db.collection(\"Comments\").doc(comment_id).get());\n            });\n\n            Promise.all(comment_fetches).then((results) => {\n                results = results.map((res) => {\n                    return res.data();\n                });\n                resolve(results);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    async fetchCommentsForDesignById(design_id) {\n        return new Promise((resolve, reject) => {\n            db.runTransaction((transaction) => {\n                let design_ref = db.collection(\"Designs\").doc(design_id);\n\n                return transaction.get(design_ref).then((design_snapshot) => {\n                    if(!design_snapshot.exists) {\n                        throw \"Design doesn't exist\";\n                    }\n\n                    let design_doc = design_snapshot.data();\n\n                    let commentsRefs = design_doc.comments;\n                    \n                    if(commentsRefs === null || commentsRefs.length === 0) return [];\n                    let commentsFetches = commentsRefs.map((c) => {\n                            let ref = db.collection(\"Comments\").doc(c);\n                            return transaction.get(ref);\n                        });\n\n                    return Promise.all(commentsFetches).then((fetchedComments) => {\n                        fetchedComments = fetchedComments.map((fc) => {\n                            return fc.data();\n                        });\n                        return fetchedComments;\n                    });\n\n                });\n            }).then((comments) => {\n                // Transaction successful\n                resolve(comments);\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    async addComment(design_id, comment_value) {\n        return new Promise((resolve, reject) => {\n\n            if(!this.isAuthenticated()) reject(\"Please login before making a comment!\");\n\n            db.runTransaction((transaction) => {\n                let user = this.getAuthUser(),\n                    comment_ref = db.collection(\"Comments\").doc(),\n                    comment_id = comment_ref.id,\n                    user_ref = db.collection(\"Users\").doc(user.uid),\n                    design_ref = db.collection(\"Designs\").doc(design_id);\n\n                return Promise.all([\n                    transaction.get(user_ref),\n                    transaction.get(design_ref)\n                ]).then((snapshots) => {\n                    let user_snapshot = snapshots[0],\n                        design_snapshot = snapshots[1];\n                    if(!user_snapshot.exists) throw \"User document doesn't exist\";\n                    if(!design_snapshot.exists) throw \"Design document doesn't exist\";\n\n                    transaction.set(comment_ref, {\n                        id: comment_id,\n                        time: firebase.firestore.FieldValue.serverTimestamp(),\n                        modified: firebase.firestore.FieldValue.serverTimestamp(),\n                        content: comment_value,\n                        author: user.displayName,\n                        uid: user.uid,\n                        design: design_id,\n                        upvoteCount: 0,\n                    });\n\n                    transaction.update(user_ref, {\n                        comments: firebase.firestore.FieldValue.arrayUnion(comment_id)\n                    });\n\n                    transaction.update(design_ref, {\n                        comments: firebase.firestore.FieldValue.arrayUnion(comment_id)\n                    });\n                });\n                    \n            }).then(() => {\n                // Transaction successful\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    async editComment(comment_id, new_value, new_timestamp) {\n        return new Promise((resolve, reject) => {\n            if(!this.isAuthenticated()) reject(\"Please login before editing a comment!\");\n            db.runTransaction((transaction) => {\n                let comment_ref = db.collection(\"Comments\").doc(comment_id);\n                return transaction.get(comment_ref).then((comment_snapshot) => {\n                    if(!comment_snapshot.exists) throw \"Comment document doesn't exist\";\n\n                    transaction.update(comment_ref, {\n                        content: new_value,\n                        modified: new_timestamp\n                    });\n                });\n            }).then(() => {\n                // Transaction succesful\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    async removeComment(comment_id) {\n        return new Promise((resolve, reject) => {\n            if(!this.isAuthenticated()) reject(\"Please login before removing a comment!\");\n           \n            db.runTransaction((transaction) => {\n                let comment_ref = db.collection(\"Comments\").doc(comment_id);\n                \n                return transaction.get(comment_ref).then((comment_snapshot) => {\n                    if(!comment_snapshot.exists) throw \"Comment document doesn't exist\";\n\n                    let comment_doc = comment_snapshot.data(),\n                        design_id = comment_doc.design,\n                        { uid } = comment_doc,\n                        design_ref = db.collection(\"Designs\").doc(design_id),\n                        user_ref = db.collection(\"Users\").doc(uid);\n\n                    transaction.update(design_ref, {\n                        comments: firebase.firestore.FieldValue.arrayRemove(comment_id)\n                    });\n\n                    transaction.update(user_ref, {\n                        comments: firebase.firestore.FieldValue.arrayRemove(comment_id)\n                    });\n\n                    transaction.delete(comment_ref);\n                });\n            }).then(() => {\n                // Transaction succesful\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    async upvoteDesign(design_id) {\n        return new Promise((resolve, reject) => {\n            if(!this.isAuthenticated()) reject(\"Please login before upvoting a design!\");\n\n            db.runTransaction((transaction) => {\n                let user = this.getAuthUser(),\n                    { uid } = user,\n                    user_ref = db.collection(\"Users\").doc(uid),\n                    design_ref = db.collection(\"Designs\").doc(design_id),\n                    increment = 1;\n\n                return transaction.get(user_ref).then((user_snapshot) => {\n                    if(!user_snapshot.exists) throw \"User document doesn't exist\";\n\n                    let user_doc = user_snapshot.data();\n\n                    // Check if user has already upvoted\n                    if(user_doc.upvotes !== null && user_doc.upvotes.includes(design_id)) {\n                        throw \"You can't upvote a design more than once!\";\n                    }\n\n                    // Check if user has downvoted\n                    if(user_doc.downvotes !== null && user_doc.downvotes.includes(design_id)) increment++;\n\n                    transaction.update(user_ref, {\n                        upvotes: firebase.firestore.FieldValue.arrayUnion(design_id),\n                        downvotes: increment > 1 ? firebase.firestore.FieldValue.arrayRemove(design_id) : user_doc.downvotes\n                    });\n\n                    transaction.update(design_ref, {\n                        upvotes: firebase.firestore.FieldValue.increment(increment)\n                    });\n                });\n            }).then(() => {\n                // Transaction successful\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    async downvoteDesign(design_id) {\n        return new Promise((resolve, reject) => {\n            if(!this.isAuthenticated()) reject(\"Please login before downvoting a design!\");\n\n            db.runTransaction((transaction) => {\n                let user = this.getAuthUser(),\n                    { uid } = user,\n                    user_ref = db.collection(\"Users\").doc(uid),\n                    design_ref = db.collection(\"Designs\").doc(design_id),\n                    increment = 1;\n\n                return transaction.get(user_ref).then((user_snapshot) => {\n                    if(!user_snapshot.exists) throw \"User document doesn't exist\";\n\n                    let user_doc = user_snapshot.data();\n\n                    // Check if user has already downvoted\n                    if(user_doc.downvotes !== null && user_doc.downvotes.includes(design_id)) {\n                        throw \"You can't downvote a design more than once!\";\n                    }\n\n                    // Check if user has upvoted\n                    if(user_doc.upvotes !== null && user_doc.upvotes.includes(design_id)) increment++;\n\n                    transaction.update(user_ref, {\n                        upvotes: increment > 1 ? firebase.firestore.FieldValue.arrayRemove(design_id) : user_doc.upvotes,\n                        downvotes: firebase.firestore.FieldValue.arrayUnion(design_id)\n                    });\n\n                    transaction.update(design_ref, {\n                        upvotes: firebase.firestore.FieldValue.increment(-increment)\n                    });\n                });\n            }).then(() => {\n                // Transaction successful\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    async userHasUpvotedComment(uid, comment_id) {\n        return new Promise((resolve, reject) => {\n            if(uid === undefined || uid === null) reject(\"User ID not supplied\");\n            if(comment_id === undefined || comment_id === null) reject(\"Comment ID not supplied\");\n\n            let user_ref = db.collection(\"Users\").doc(uid);\n\n            user_ref.get().then((user_snapshot) => {\n                if(!user_snapshot.exists) throw \"User document doesn't exist\";\n\n                let user_doc = user_snapshot.data();\n\n                // Check if there are any upvoted comments\n                if(user_doc.upvotedComments === null || user_doc.upvotedComments.length === 0) {\n                    resolve(false);\n                };\n\n                // Check if comment_id is in the upvoted list\n                let isInList = user_doc.upvotedComments.includes(comment_id);\n\n                resolve(isInList); \n            }).catch((error) => {\n                reject(error);\n            })\n        });\n    }\n\n    async addCommentUpvote(comment_id) {\n        return new Promise((resolve, reject) => {\n            if(!this.isAuthenticated()) reject(\"Please login before upvoting comments!\");\n\n            db.runTransaction((transaction) => {\n                let user = this.getAuthUser(),\n                    { uid } = user,\n                    user_ref = db.collection(\"Users\").doc(uid),\n                    comment_ref = db.collection(\"Comments\").doc(uid);\n\n                return Promise.all([\n                    transaction.get(user_ref),\n                    transaction.get(comment_ref)\n                ]).then((snapshots) => {\n                    let user_snapshot = snapshots[0],\n                        comment_snapshot = snapshots[1];\n                    if(!user_snapshot.exists) throw \"User document doesn't exist\";\n                    if(!comment_snapshot.exists) throw \"Comment document doesn't exist\";\n\n                    let user_doc = user_snapshot.data();\n                        // comment_doc = comment_snapshot.data();\n\n                    // Check if already upvoted\n                    if(user_doc.upvotedComments !== null && user_doc.upvotedComments.includes(comment_id)) {\n                        throw \"You can only upvote a comment once\";\n                    }\n\n                    transaction.update(comment_ref, {\n                        upvoteCount: firebase.firestore.FieldValue.increment(1)\n                    });\n\n                    transaction.update(user_ref, {\n                        upvotedComments: firebase.firestore.FieldValue.arrayUnion(comment_id)\n                    });\n                });\n            }).then(() => {\n                // Transaction successful\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    async removeCommentUpvote(comment_id) {\n        return new Promise((resolve, reject) => {\n            if(!this.isAuthenticated()) reject(\"Please login to remove a comment upvote!\");\n\n            db.runTransaction((transaction) => {\n                let user = this.getAuthUser(),\n                    { uid } = user,\n                    user_ref = db.collection(\"Users\").doc(uid),\n                    comment_ref = db.collection(\"Comments\").doc(comment_id);\n\n                return Promise.all([\n                    transaction.get(user_ref),\n                    transaction.get(comment_ref)\n                ]).then((snapshots) => {\n                    let user_snapshot = snapshots[0],\n                        comment_snapshot = snapshots[1];\n                    if(!user_snapshot.exists) throw \"User document doesn't exist\";\n                    if(!comment_snapshot.exists) throw \"Comment document doesn't exist\";\n\n                    let user_doc = user_snapshot.data();\n\n                    // Check if user hasn't upvoted, if not, just return\n                    if(user_doc.upvotedComments !== null && !user_doc.upvotedComments.includes(comment_id)) return;\n\n                    transaction.update(comment_ref, {\n                        upvoteCount: firebase.firestore.FieldValue.increment(-1)\n                    });\n\n                    transaction.update(user_ref, {\n                        upvotedComments: firebase.firestore.FieldValue.arrayRemove(comment_id)\n                    });\n                });\n\n            }).then(() => {\n                // Transaction successful\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            })\n        });\n    }\n\n    getAuthUser() {\n        return auth.user === null ? auth.currentUser : auth.user;\n    }\n\n    getMyProfileUrl() {\n        let user = this.getAuthUser();\n        return user !== null && user.hasOwnProperty(\"photoURL\")\n            ? user.photoURL :\n            this.defaultPhotoUrl;\n    }\n\n    async getProfileUrl(uid) {\n        return new Promise((resolve, reject) => {\n            let user_ref = db.collection(\"Users\").doc(uid);\n\n            user_ref.get().then((user_snapshot) => {\n                if(!user_snapshot.exists) throw \"User document doesn't exist\";\n                \n                let user_doc = user_snapshot.data();\n\n                if(user_doc.hasOwnProperty(\"photoUrl\")) {\n                    resolve(user_doc.photoUrl);\n                } else {\n                    resolve(this.defaultPhotoUrl);\n                }\n            }).catch((error) => {\n                console.log(error);\n                resolve(this.defaultPhotoUrl);\n            });\n        });\n    }\n\n    getDBUser() {\n        return this.user;\n    }\n\n    isAuthenticated() {\n        return auth.user !== null || auth.currentUser !== null;\n    }\n\n    async getDesigns() {\n        try {\n            const designsRef = db.collection('Designs');\n            const allDesignsArray = await designsRef.get();\n            const allDesigns = [];\n\n            allDesignsArray.forEach(design => {\n                allDesigns.push(design.data());\n            });\n\n            return allDesigns;\n        }\n        catch (err) {\n            console.log(\"Could not fetch designs:\", err);\n            return {err};\n        }\n    }\n\n    getDesignsMap() {\n        return this.designsMap;\n    }\n\n    async getTop3Designs(opts) {\n        let designs = await this.getDesigns();\n        return designs.slice(0,3);\n    }\n}\n\nlet dbstore = new DBStore();\nexport default dbstore;"]},"metadata":{},"sourceType":"module"}